#http://service.iris.edu/irisws/timeseries/1/ -API
#http://service.iris.edu/irisws/timeseries/docs/1/builder/
#http://service.iris.edu/irisws/timeseries/1/query?net=IU&sta=ANMO&cha=BHZ&start=2010-02-27T06:33:00&end=2010-02-27T06:35:00&format=plot&loc=00

#notes for implimenting in the stepper motors https://dsp.stackexchange.com/questions/84429/how-to-calculate-amplitude-from-a-wav-file
# use the API to get the start and end of the earthquakes in exact seconds make sure you get some time before the earth quake so the stepper motors can accelate
# map the +1 through -1 wav amplitude to the +1/.5 through -1/.5 amplitude on the earthquake machine
#adjust the sampling rate of the API requesting to speed up ot slow down the earthquake

#use this to get the BPM of a section https://nlml.github.io/neural-networks/detecting-bpm-neural-networks/
#tanslate that to frequency

#gets the seismograph as a wav file then coverts it into something the stepper motor can use
#this code is intended to run mannually at by each person and not automatically with a UI at the moment which might change in the future
import librosa
import librosa.display
import matplotlib.pyplot as plt
import numpy as np
from IPython.display import Audio, display
import matplotlib.pyplot as plt

import ruptures as rpt  # our package

from scipy.io.wavfile import write

import math

def fig_ax(figsize=(15, 5), dpi=150):
    """Return a (matplotlib) figure and ax objects with given size."""
    return plt.subplots(figsize=figsize, dpi=dpi)


duration = 30  # in seconds


#change to the .wav file you want to use for this
signal, sampling_rate = librosa.load("Chile2010Equake.wav", duration=duration)





# listen to the music
display(Audio(data=signal, rate=sampling_rate))

# look at the envelope
fig, ax = fig_ax()
ax.plot(np.arange(signal.size) / sampling_rate, signal)
ax.set_xlim(0, signal.size / sampling_rate)
ax.set_xlabel("Time (s)")
_ = ax.set(title="Sound envelope")

# Compute the onset strength
hop_length_tempo = 256
oenv = librosa.onset.onset_strength(
    y=signal, sr=sampling_rate, hop_length=hop_length_tempo
)
# Compute the tempogram
tempogram = librosa.feature.tempogram(
    onset_envelope=oenv,
    sr=sampling_rate,
    hop_length=hop_length_tempo,
)
# Display the tempogram
fig, ax = fig_ax()
_ = librosa.display.specshow(
    tempogram,
    ax=ax,
    hop_length=hop_length_tempo,
    sr=sampling_rate,
    x_axis="s",
    y_axis="tempo",
)

# Choose detection method
algo = rpt.KernelCPD(kernel="cosine").fit(tempogram.T)


# Segmentation
bkps = algo.predict(n_bkps=19)
# Convert the estimated change points (frame counts) to actual timestamps
bkps_times = librosa.frames_to_time(bkps, sr=sampling_rate, hop_length=hop_length_tempo)

# Displaying results
fig, ax = fig_ax()
_ = librosa.display.specshow(
    tempogram,
    ax=ax,
    x_axis="s",
    y_axis="tempo",
    hop_length=hop_length_tempo,
    sr=sampling_rate,
)

for b in bkps_times[:-1]:
    ax.axvline(b, ls="--", color="white", lw=4)

# Compute change points corresponding indexes in original signal
bkps_time_indexes = (sampling_rate * bkps_times).astype(int).tolist()

amplitudes = []
tempos = []
for (segment_number, (start, end)) in enumerate(
    rpt.utils.pairwise([0] + bkps_time_indexes), start=1
):
    segment = signal[start:end]
    print(f"Segment n°{segment_number} (duration: {segment.size/sampling_rate:.2f} s)")
    write(f"Segment n°{segment_number}.wav", sampling_rate, segment)

    y1, sr1 = librosa.load(f"Segment n°{segment_number}.wav", duration=duration)
    onset_env = librosa.onset.onset_strength(y=y1, sr=sr1)
    tempo = librosa.beat.tempo(onset_envelope=onset_env, sr=sr1)
    amplitude = y1[-20]
    print(amplitude)
    amplitudes.append(amplitude)
    tempos.append(tempo)

    #print(f"temp: {tempo}")

    display(Audio(data=segment, rate=sampling_rate))

y, sr = signal, sampling_rate
onset_env = librosa.onset.onset_strength(y=y, sr=sr)

# Or a dynamic tempo
dtempo = librosa.beat.tempo(onset_envelope=onset_env, sr=sr,
                            aggregate=None)


fig, ax = plt.subplots()
tg = librosa.feature.tempogram(onset_envelope=onset_env, sr=sr,
                               hop_length=hop_length_tempo)

librosa.display.specshow(tg, x_axis='time', y_axis='tempo', cmap='magma', ax=ax)
ax.plot(librosa.times_like(dtempo), dtempo,
        color='c', linewidth=1.5, label='Tempo estimate (default prior)')

plt.show()

with open("../EarthQuakeStuff/Ex-7-Hardware-Setup/NewProject/output.csv", "w") as txt_file:
    for line in dtempo:
        line = int(line)
        txt_file.write(f"{line}"+ ",") # works with any number of elements in a line
